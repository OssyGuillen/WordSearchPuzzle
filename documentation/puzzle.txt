Help on module puzzle:

NAME
    puzzle

CLASSES
    builtins.object
        Board
        Clue
            ByLength
            ByLetters
            BySolution
            BySubject
        Dictionary
        Game
            MultiPlayer
            SinglePlayer
                PracticeMode
                SimpleMode
                TimeRaceMode
        HighScores
        Instruction
        Player
        Score
        Subject
    
    class Board(builtins.object)
     |  Manage the board where the words to be found are placed.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  add_word_into_column(self, column, word)
     |      Insert a word into a column of the board. 
     |      
     |      Parameters
     |      ----------
     |      column: integer
     |              The number of the column.
     |      word: string
     |              The word to be inserted.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  add_word_into_row(self, row, word)
     |      Insert a word into a row of the board. 
     |      
     |      Parameters
     |      ----------
     |      row: int
     |              The number of the row.
     |      word: str
     |              The word to be inserted.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  build(self, words)
     |      Add to the board all the words given and fill the blanks spaces left
     |              with random letters .
     |      
     |      Parameters
     |      ----------
     |              words : [str]
     |                      An array with the words to be placed on the board.
     |  
     |  can_generate_a_word(self, row1, column1, row2, column2)
     |      Receive 2 cells and check they are valid, if they form a vertical 
     |              or an horizontal line, and if they form a word long enough.
     |      
     |      Paramenters
     |      -----------
     |      row1 : int
     |              row number of the starting cell.
     |      column1 : int
     |              column number of the starting cell.
     |      row2 : int
     |              row number of the final cell.
     |      column2 : int
     |              column number of the final cell.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  display(self)
     |      Display the grid on the standard output. Row and columns numbers
     |      are included.
     |  
     |  fill(self)
     |      Fill the blank spaces of the board with random letters.
     |  
     |  get_letter(self, row, column)
     |      Return the letter that inside a cell on the board.
     |      
     |      Paramenters
     |      -----------
     |      row : int
     |              row of the cell of the letter wanted.
     |      column : int
     |              column of the cell of the letter wanted.
     |      
     |      Returns
     |      -------
     |      str
     |              Letter extratect from the cell of the board.
     |  
     |  get_max_length_word(self)
     |      Return the Maximun length of a word allowed.
     |      
     |      Returns
     |      -------
     |      int
     |              The maximun length
     |  
     |  get_max_num_words(self)
     |      Return the maximun number of words allowed.
     |      
     |      Returns
     |      -------
     |      int
     |              The maximun number of words.
     |  
     |  get_min_length_word(self)
     |      Return the Minimun length of a word allowed.
     |      
     |      Returns
     |      -------
     |      int
     |              The minimun length.
     |  
     |  get_word(self, row1, column1, row2, column2)
     |      Get the word from the grid. The word is specified by a starting cell
     |              and a final cell.
     |      
     |      Paramenters
     |      -----------
     |              row1 : int
     |                      row number of the starting cell.
     |              column1 : int
     |                      column number of the starting cell.
     |              row2 : int
     |                      row number of the final cell.
     |              column2 : int
     |                      column number of the final cell.
     |      
     |      Returns
     |      -------
     |      str
     |              Word obtained from the grid. None if the cells are not valid.
     |  
     |  is_valid_cell(self, row, column)
     |      Check if the cell is inside the grid.
     |              
     |      Paramenters
     |      -----------
     |      row : int
     |              row number of the cell.
     |      column : int 
     |              column number of the cell.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  is_valid_column(self, column)
     |      Check if the column number is inside the grid.
     |              
     |      Paramenters
     |      -----------
     |      column : int
     |              column number.
     |      
     |      Returns
     |      -------
     |      bool 
     |              True for success, False otherwise.
     |  
     |  is_valid_number_spaces(self, direction, number)
     |      Check if the number is to rotate is correct.
     |              
     |      Paramenters
     |      ----------- 
     |      direction : str
     |              direction to rotate.
     |      number : int
     |              number of spaces to rotate.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  is_valid_row(self, row)
     |      Check if the row number is inside the grid.
     |              
     |      Paramenters
     |      ----------- 
     |      row : int 
     |              row number.
     |      
     |      Returns
     |      -------
     |      bool 
     |              True for success, False otherwise.
     |  
     |  restart_board(self)
     |  
     |  rotate_horizontally(self, row, number, direction)
     |      Rotates a row of the current grid a 'number' amount of spaces.
     |              
     |      Paramenters
     |      ----------- 
     |      row : int
     |              row number to rotate.
     |      number : int
     |              number of space to rotate.
     |      direction : str
     |              direction to rotate the row ("left" or "right").
     |      
     |      Returns
     |      -------
     |      bool
     |              True if the board was successfully rotate, False otherwise.
     |  
     |  rotate_vertically(self, column, number, direction)
     |      Rotates a column of the current grid a 'number' amount of spaces.
     |              
     |      Paramenters
     |      -----------
     |      column : int
     |              column number to rotate.
     |      number : int
     |              number of space to rotate.
     |      direction : str 
     |              direction to rotate the column ("up" or "down").
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True if the board was successfully rotate, False otherwise.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ByLength(Clue)
     |  Method resolution order:
     |      ByLength
     |      Clue
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  display(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Clue:
     |  
     |  __init__(self)
     |  
     |  add_word_to_found(self, word)
     |      Add a word to the list of words that have been found.
     |      
     |      Parameters
     |      ----------
     |              word (str): word to be added.
     |  
     |  add_word_to_not_found(self, word)
     |      Add a word to the clue as not found.
     |      
     |      Parameters
     |      ----------
     |      word : string
     |              Word that will be added.
     |  
     |  build(self, subject, num_words, min_length, max_length)
     |      Build the clue, using the words of a subject, adding randomly
     |              the words into the not found list. There will be 10 clues per board 
     |              by default.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              Subject object that contain the words to be used.
     |      num_words : int
     |              Number of words to be selected.
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: in
     |              Maximun length of a word.
     |  
     |  found_all_the_words(self)
     |      Check if the list of words that have not been found is empty and
     |              the list of words that have been found is not empty.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True for success, False otherwise.
     |  
     |  get_words_not_found(self)
     |      Return the list of words not found. 
     |      
     |      Returns
     |      -------
     |      [str]
     |              List of words that has not been found by the player.
     |  
     |  remove_word_from_not_found(self, word)
     |      Check if the word is on the list of words that have not been found
     |              and removed it.
     |      
     |      Parameters
     |      -----------
     |      word : str
     |              Word to be removed.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True if the word was successfully removed. False otherwise.
     |  
     |  word_already_found(self, word)
     |      Checks if a word is on the list of words already found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              Word to check.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_in_clue(self, word)
     |      Cheks if a word belongs to a clue. Checks if a word is included on
     |              the list of words already found or on the list of words that have 
     |              not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_not_found(self, word)
     |      Cheks if a word is on the list of words that have not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool 
     |              True for success, False otherwise.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Clue:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ByLetters(Clue)
     |  Method resolution order:
     |      ByLetters
     |      Clue
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  display(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Clue:
     |  
     |  __init__(self)
     |  
     |  add_word_to_found(self, word)
     |      Add a word to the list of words that have been found.
     |      
     |      Parameters
     |      ----------
     |              word (str): word to be added.
     |  
     |  add_word_to_not_found(self, word)
     |      Add a word to the clue as not found.
     |      
     |      Parameters
     |      ----------
     |      word : string
     |              Word that will be added.
     |  
     |  build(self, subject, num_words, min_length, max_length)
     |      Build the clue, using the words of a subject, adding randomly
     |              the words into the not found list. There will be 10 clues per board 
     |              by default.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              Subject object that contain the words to be used.
     |      num_words : int
     |              Number of words to be selected.
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: in
     |              Maximun length of a word.
     |  
     |  found_all_the_words(self)
     |      Check if the list of words that have not been found is empty and
     |              the list of words that have been found is not empty.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True for success, False otherwise.
     |  
     |  get_words_not_found(self)
     |      Return the list of words not found. 
     |      
     |      Returns
     |      -------
     |      [str]
     |              List of words that has not been found by the player.
     |  
     |  remove_word_from_not_found(self, word)
     |      Check if the word is on the list of words that have not been found
     |              and removed it.
     |      
     |      Parameters
     |      -----------
     |      word : str
     |              Word to be removed.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True if the word was successfully removed. False otherwise.
     |  
     |  word_already_found(self, word)
     |      Checks if a word is on the list of words already found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              Word to check.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_in_clue(self, word)
     |      Cheks if a word belongs to a clue. Checks if a word is included on
     |              the list of words already found or on the list of words that have 
     |              not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_not_found(self, word)
     |      Cheks if a word is on the list of words that have not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool 
     |              True for success, False otherwise.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Clue:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BySolution(Clue)
     |  Subclass that displays all the words in the Clue.
     |  
     |  Method resolution order:
     |      BySolution
     |      Clue
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  display(self)
     |      Display on the standard output the name of the subject and the complete
     |      list of words that the player needs to find.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Clue:
     |  
     |  __init__(self)
     |  
     |  add_word_to_found(self, word)
     |      Add a word to the list of words that have been found.
     |      
     |      Parameters
     |      ----------
     |              word (str): word to be added.
     |  
     |  add_word_to_not_found(self, word)
     |      Add a word to the clue as not found.
     |      
     |      Parameters
     |      ----------
     |      word : string
     |              Word that will be added.
     |  
     |  build(self, subject, num_words, min_length, max_length)
     |      Build the clue, using the words of a subject, adding randomly
     |              the words into the not found list. There will be 10 clues per board 
     |              by default.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              Subject object that contain the words to be used.
     |      num_words : int
     |              Number of words to be selected.
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: in
     |              Maximun length of a word.
     |  
     |  found_all_the_words(self)
     |      Check if the list of words that have not been found is empty and
     |              the list of words that have been found is not empty.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True for success, False otherwise.
     |  
     |  get_words_not_found(self)
     |      Return the list of words not found. 
     |      
     |      Returns
     |      -------
     |      [str]
     |              List of words that has not been found by the player.
     |  
     |  remove_word_from_not_found(self, word)
     |      Check if the word is on the list of words that have not been found
     |              and removed it.
     |      
     |      Parameters
     |      -----------
     |      word : str
     |              Word to be removed.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True if the word was successfully removed. False otherwise.
     |  
     |  word_already_found(self, word)
     |      Checks if a word is on the list of words already found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              Word to check.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_in_clue(self, word)
     |      Cheks if a word belongs to a clue. Checks if a word is included on
     |              the list of words already found or on the list of words that have 
     |              not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_not_found(self, word)
     |      Cheks if a word is on the list of words that have not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool 
     |              True for success, False otherwise.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Clue:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BySubject(Clue)
     |  Method resolution order:
     |      BySubject
     |      Clue
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  display(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Clue:
     |  
     |  __init__(self)
     |  
     |  add_word_to_found(self, word)
     |      Add a word to the list of words that have been found.
     |      
     |      Parameters
     |      ----------
     |              word (str): word to be added.
     |  
     |  add_word_to_not_found(self, word)
     |      Add a word to the clue as not found.
     |      
     |      Parameters
     |      ----------
     |      word : string
     |              Word that will be added.
     |  
     |  build(self, subject, num_words, min_length, max_length)
     |      Build the clue, using the words of a subject, adding randomly
     |              the words into the not found list. There will be 10 clues per board 
     |              by default.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              Subject object that contain the words to be used.
     |      num_words : int
     |              Number of words to be selected.
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: in
     |              Maximun length of a word.
     |  
     |  found_all_the_words(self)
     |      Check if the list of words that have not been found is empty and
     |              the list of words that have been found is not empty.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True for success, False otherwise.
     |  
     |  get_words_not_found(self)
     |      Return the list of words not found. 
     |      
     |      Returns
     |      -------
     |      [str]
     |              List of words that has not been found by the player.
     |  
     |  remove_word_from_not_found(self, word)
     |      Check if the word is on the list of words that have not been found
     |              and removed it.
     |      
     |      Parameters
     |      -----------
     |      word : str
     |              Word to be removed.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True if the word was successfully removed. False otherwise.
     |  
     |  word_already_found(self, word)
     |      Checks if a word is on the list of words already found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              Word to check.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_in_clue(self, word)
     |      Cheks if a word belongs to a clue. Checks if a word is included on
     |              the list of words already found or on the list of words that have 
     |              not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_not_found(self, word)
     |      Cheks if a word is on the list of words that have not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool 
     |              True for success, False otherwise.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Clue:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Clue(builtins.object)
     |  Manage the list of words that the player needs to find on the game.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  add_word_to_found(self, word)
     |      Add a word to the list of words that have been found.
     |      
     |      Parameters
     |      ----------
     |              word (str): word to be added.
     |  
     |  add_word_to_not_found(self, word)
     |      Add a word to the clue as not found.
     |      
     |      Parameters
     |      ----------
     |      word : string
     |              Word that will be added.
     |  
     |  build(self, subject, num_words, min_length, max_length)
     |      Build the clue, using the words of a subject, adding randomly
     |              the words into the not found list. There will be 10 clues per board 
     |              by default.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              Subject object that contain the words to be used.
     |      num_words : int
     |              Number of words to be selected.
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: in
     |              Maximun length of a word.
     |  
     |  found_all_the_words(self)
     |      Check if the list of words that have not been found is empty and
     |              the list of words that have been found is not empty.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True for success, False otherwise.
     |  
     |  get_words_not_found(self)
     |      Return the list of words not found. 
     |      
     |      Returns
     |      -------
     |      [str]
     |              List of words that has not been found by the player.
     |  
     |  remove_word_from_not_found(self, word)
     |      Check if the word is on the list of words that have not been found
     |              and removed it.
     |      
     |      Parameters
     |      -----------
     |      word : str
     |              Word to be removed.
     |      
     |      Returns
     |      ------- 
     |      bool
     |              True if the word was successfully removed. False otherwise.
     |  
     |  word_already_found(self, word)
     |      Checks if a word is on the list of words already found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              Word to check.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_in_clue(self, word)
     |      Cheks if a word belongs to a clue. Checks if a word is included on
     |              the list of words already found or on the list of words that have 
     |              not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  word_not_found(self, word)
     |      Cheks if a word is on the list of words that have not been found.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              word to be checked.
     |      
     |      Returns
     |      -------
     |      bool 
     |              True for success, False otherwise.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Dictionary(builtins.object)
     |  Manage all the subjects available on the game.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  add_subject(self, subject)
     |      Add a subject object into the dictionary.
     |      
     |      Parameters
     |      ----------
     |      subject: Subject
     |              Subject to be added.
     |  
     |  display_subjects(self)
     |      Display on the standard output the list of the names of the 
     |      all the subjects.
     |  
     |  get_subject_by_name(self, name)
     |      Return a subject using its name element.
     |      
     |      Parameters
     |      ----------
     |      name : str
     |              The name of the subject as a string.
     |      
     |      Returns
     |      -------
     |      Subject
     |              Subject corresponding to `name`.
     |  
     |  load(self)
     |      Load the dictionary from xml files into subjects directory. 
     |      
     |      Returns
     |      -------
     |      bool
     |              True for success, False otherwise.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Game(builtins.object)
     |  Superclass. Manage information of a game on its different modes.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  add_board(self, board)
     |      Associate a built board to the game.
     |      
     |      Parameters
     |      ----------
     |      board : Board
     |              Board to be added to the game.
     |  
     |  end_current_game(self)
     |      If the player wants to end the game, sets the variable start_again 
     |      to True. Otherwise exit the game.
     |  
     |  find_word(self)
     |      Find a word specified by the user. Get the row and the column 
     |      numbers corresponding to initial and the final cells of the word.
     |      Get the word from the board, and check if the word is valid.
     |      Display appropiate messages to the user.
     |  
     |  get_column_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : column number read.
     |  
     |  get_direction(self)
     |      Read from standard input a string corresponding to a direction.
     |              Only 'right', 'left', 'up', 'down' are possible.
     |      
     |      Returns
     |      -------
     |      str
     |              direction read.
     |  
     |  get_number_spaces(self, direction)
     |      Read from standard input an integer.
     |      
     |      Parameters
     |      ----------
     |      direction : str
     |              Direction the board is going to rotate to.
     |      
     |      Returns
     |      -------
     |      int
     |              Number of spaces read.
     |  
     |  get_play_again(self)
     |      Ask the user if he-she wants to start a new game.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if success, False otherwise.
     |  
     |  get_rotation_attr(self)
     |      Get the direction to rotate the board, the number of row or column
     |      that is going to rotate and the amount of spaces to rotate. Then
     |      rotates the board accordint to these parameters.
     |  
     |  get_row_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : row number read.
     |  
     |  play_again(self)
     |      Return if the player wants to play again.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if the player wants to play again. False otherwise.
     |  
     |  read_command(self)
     |      ' Reads a command from standard input. Only 'rotate', 'word', 'help', 
     |      'exit' are valid. Calls the corresponding function to execute each 
     |      command.
     |  
     |  select_clue(self, subject, num_words, min_length, max_length)
     |      Select a specific type of clue. For this version, it will be 
     |              BySolution.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              subject that will be used into the building clue process.
     |      num_words : int
     |              Number of words to be selected
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: int
     |              Maximun length of a word.
     |  
     |  select_subject(self)
     |      Return a selected subject from the dictionary.
     |      
     |      Returns
     |      -------
     |      Subject
     |              Subject selected by the player.
     |  
     |  setup(self)
     |      Setup all the configuration of the game before starting.
     |  
     |  turn(self)
     |      Manages the turns of the player. Call the function to read the
     |      commands, and display the current state of the game.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class HighScores(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  add_race_time_mode_highscore(self, score)
     |  
     |  add_simple_mode_highscore(self, score)
     |  
     |  display(self)
     |  
     |  export_highscores(self, file)
     |  
     |  import_highscores(self, file)
     |  
     |  is_highscore(self, score)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Instruction(builtins.object)
     |  Manage all the information corresponding to the rules of 
     |  the game.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  display(self)
     |      'Display on the standard output the rules of the game.
     |  
     |  import_instruction(self, file)
     |      Import the set of instructions of the game from a file.
     |      
     |      Parameters
     |      ----------
     |      file : str
     |              Path of the file where the instructions are found.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class MultiPlayer(Game)
     |  Method resolution order:
     |      MultiPlayer
     |      Game
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, player1, player2)
     |  
     |  display_current_state(self)
     |  
     |  display_winner(self)
     |  
     |  is_time_over(self)
     |  
     |  manage_time(self)
     |  
     |  play(self)
     |  
     |  restart(self)
     |  
     |  set_current_player(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Game:
     |  
     |  add_board(self, board)
     |      Associate a built board to the game.
     |      
     |      Parameters
     |      ----------
     |      board : Board
     |              Board to be added to the game.
     |  
     |  end_current_game(self)
     |      If the player wants to end the game, sets the variable start_again 
     |      to True. Otherwise exit the game.
     |  
     |  find_word(self)
     |      Find a word specified by the user. Get the row and the column 
     |      numbers corresponding to initial and the final cells of the word.
     |      Get the word from the board, and check if the word is valid.
     |      Display appropiate messages to the user.
     |  
     |  get_column_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : column number read.
     |  
     |  get_direction(self)
     |      Read from standard input a string corresponding to a direction.
     |              Only 'right', 'left', 'up', 'down' are possible.
     |      
     |      Returns
     |      -------
     |      str
     |              direction read.
     |  
     |  get_number_spaces(self, direction)
     |      Read from standard input an integer.
     |      
     |      Parameters
     |      ----------
     |      direction : str
     |              Direction the board is going to rotate to.
     |      
     |      Returns
     |      -------
     |      int
     |              Number of spaces read.
     |  
     |  get_play_again(self)
     |      Ask the user if he-she wants to start a new game.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if success, False otherwise.
     |  
     |  get_rotation_attr(self)
     |      Get the direction to rotate the board, the number of row or column
     |      that is going to rotate and the amount of spaces to rotate. Then
     |      rotates the board accordint to these parameters.
     |  
     |  get_row_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : row number read.
     |  
     |  play_again(self)
     |      Return if the player wants to play again.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if the player wants to play again. False otherwise.
     |  
     |  read_command(self)
     |      ' Reads a command from standard input. Only 'rotate', 'word', 'help', 
     |      'exit' are valid. Calls the corresponding function to execute each 
     |      command.
     |  
     |  select_clue(self, subject, num_words, min_length, max_length)
     |      Select a specific type of clue. For this version, it will be 
     |              BySolution.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              subject that will be used into the building clue process.
     |      num_words : int
     |              Number of words to be selected
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: int
     |              Maximun length of a word.
     |  
     |  select_subject(self)
     |      Return a selected subject from the dictionary.
     |      
     |      Returns
     |      -------
     |      Subject
     |              Subject selected by the player.
     |  
     |  setup(self)
     |      Setup all the configuration of the game before starting.
     |  
     |  turn(self)
     |      Manages the turns of the player. Call the function to read the
     |      commands, and display the current state of the game.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Game:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Player(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, nickname)
     |  
     |  set_clue(self, clue)
     |      Set a created clue into the player's clue. 
     |      
     |      Parameters
     |      ----------
     |              clue: BySolution(Clue)
     |                      A clue object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PracticeMode(SinglePlayer)
     |  Single player mode of game implemented on version 1. 
     |  Subclass managing specific behaviours of the game.
     |  
     |  Method resolution order:
     |      PracticeMode
     |      SinglePlayer
     |      Game
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  is_win(self)
     |      Check the winning condition.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if success, False otherwhise.
     |  
     |  play(self)
     |      Manage the gameplay. Handle the turns.
     |  
     |  restart(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SinglePlayer:
     |  
     |  __init__(self)
     |  
     |  add_player(self, player)
     |  
     |  display_current_state(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Game:
     |  
     |  add_board(self, board)
     |      Associate a built board to the game.
     |      
     |      Parameters
     |      ----------
     |      board : Board
     |              Board to be added to the game.
     |  
     |  end_current_game(self)
     |      If the player wants to end the game, sets the variable start_again 
     |      to True. Otherwise exit the game.
     |  
     |  find_word(self)
     |      Find a word specified by the user. Get the row and the column 
     |      numbers corresponding to initial and the final cells of the word.
     |      Get the word from the board, and check if the word is valid.
     |      Display appropiate messages to the user.
     |  
     |  get_column_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : column number read.
     |  
     |  get_direction(self)
     |      Read from standard input a string corresponding to a direction.
     |              Only 'right', 'left', 'up', 'down' are possible.
     |      
     |      Returns
     |      -------
     |      str
     |              direction read.
     |  
     |  get_number_spaces(self, direction)
     |      Read from standard input an integer.
     |      
     |      Parameters
     |      ----------
     |      direction : str
     |              Direction the board is going to rotate to.
     |      
     |      Returns
     |      -------
     |      int
     |              Number of spaces read.
     |  
     |  get_play_again(self)
     |      Ask the user if he-she wants to start a new game.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if success, False otherwise.
     |  
     |  get_rotation_attr(self)
     |      Get the direction to rotate the board, the number of row or column
     |      that is going to rotate and the amount of spaces to rotate. Then
     |      rotates the board accordint to these parameters.
     |  
     |  get_row_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : row number read.
     |  
     |  play_again(self)
     |      Return if the player wants to play again.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if the player wants to play again. False otherwise.
     |  
     |  read_command(self)
     |      ' Reads a command from standard input. Only 'rotate', 'word', 'help', 
     |      'exit' are valid. Calls the corresponding function to execute each 
     |      command.
     |  
     |  select_clue(self, subject, num_words, min_length, max_length)
     |      Select a specific type of clue. For this version, it will be 
     |              BySolution.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              subject that will be used into the building clue process.
     |      num_words : int
     |              Number of words to be selected
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: int
     |              Maximun length of a word.
     |  
     |  select_subject(self)
     |      Return a selected subject from the dictionary.
     |      
     |      Returns
     |      -------
     |      Subject
     |              Subject selected by the player.
     |  
     |  setup(self)
     |      Setup all the configuration of the game before starting.
     |  
     |  turn(self)
     |      Manages the turns of the player. Call the function to read the
     |      commands, and display the current state of the game.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Game:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Score(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, nickname, points)
     |  
     |  __str__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SimpleMode(SinglePlayer)
     |  Method resolution order:
     |      SimpleMode
     |      SinglePlayer
     |      Game
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  compute_score(self, words, time)
     |  
     |  manage_time(self)
     |  
     |  play(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SinglePlayer:
     |  
     |  add_player(self, player)
     |  
     |  display_current_state(self)
     |  
     |  restart(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Game:
     |  
     |  add_board(self, board)
     |      Associate a built board to the game.
     |      
     |      Parameters
     |      ----------
     |      board : Board
     |              Board to be added to the game.
     |  
     |  end_current_game(self)
     |      If the player wants to end the game, sets the variable start_again 
     |      to True. Otherwise exit the game.
     |  
     |  find_word(self)
     |      Find a word specified by the user. Get the row and the column 
     |      numbers corresponding to initial and the final cells of the word.
     |      Get the word from the board, and check if the word is valid.
     |      Display appropiate messages to the user.
     |  
     |  get_column_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : column number read.
     |  
     |  get_direction(self)
     |      Read from standard input a string corresponding to a direction.
     |              Only 'right', 'left', 'up', 'down' are possible.
     |      
     |      Returns
     |      -------
     |      str
     |              direction read.
     |  
     |  get_number_spaces(self, direction)
     |      Read from standard input an integer.
     |      
     |      Parameters
     |      ----------
     |      direction : str
     |              Direction the board is going to rotate to.
     |      
     |      Returns
     |      -------
     |      int
     |              Number of spaces read.
     |  
     |  get_play_again(self)
     |      Ask the user if he-she wants to start a new game.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if success, False otherwise.
     |  
     |  get_rotation_attr(self)
     |      Get the direction to rotate the board, the number of row or column
     |      that is going to rotate and the amount of spaces to rotate. Then
     |      rotates the board accordint to these parameters.
     |  
     |  get_row_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : row number read.
     |  
     |  play_again(self)
     |      Return if the player wants to play again.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if the player wants to play again. False otherwise.
     |  
     |  read_command(self)
     |      ' Reads a command from standard input. Only 'rotate', 'word', 'help', 
     |      'exit' are valid. Calls the corresponding function to execute each 
     |      command.
     |  
     |  select_clue(self, subject, num_words, min_length, max_length)
     |      Select a specific type of clue. For this version, it will be 
     |              BySolution.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              subject that will be used into the building clue process.
     |      num_words : int
     |              Number of words to be selected
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: int
     |              Maximun length of a word.
     |  
     |  select_subject(self)
     |      Return a selected subject from the dictionary.
     |      
     |      Returns
     |      -------
     |      Subject
     |              Subject selected by the player.
     |  
     |  setup(self)
     |      Setup all the configuration of the game before starting.
     |  
     |  turn(self)
     |      Manages the turns of the player. Call the function to read the
     |      commands, and display the current state of the game.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Game:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SinglePlayer(Game)
     |  Method resolution order:
     |      SinglePlayer
     |      Game
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  add_player(self, player)
     |  
     |  display_current_state(self)
     |  
     |  restart(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Game:
     |  
     |  add_board(self, board)
     |      Associate a built board to the game.
     |      
     |      Parameters
     |      ----------
     |      board : Board
     |              Board to be added to the game.
     |  
     |  end_current_game(self)
     |      If the player wants to end the game, sets the variable start_again 
     |      to True. Otherwise exit the game.
     |  
     |  find_word(self)
     |      Find a word specified by the user. Get the row and the column 
     |      numbers corresponding to initial and the final cells of the word.
     |      Get the word from the board, and check if the word is valid.
     |      Display appropiate messages to the user.
     |  
     |  get_column_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : column number read.
     |  
     |  get_direction(self)
     |      Read from standard input a string corresponding to a direction.
     |              Only 'right', 'left', 'up', 'down' are possible.
     |      
     |      Returns
     |      -------
     |      str
     |              direction read.
     |  
     |  get_number_spaces(self, direction)
     |      Read from standard input an integer.
     |      
     |      Parameters
     |      ----------
     |      direction : str
     |              Direction the board is going to rotate to.
     |      
     |      Returns
     |      -------
     |      int
     |              Number of spaces read.
     |  
     |  get_play_again(self)
     |      Ask the user if he-she wants to start a new game.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if success, False otherwise.
     |  
     |  get_rotation_attr(self)
     |      Get the direction to rotate the board, the number of row or column
     |      that is going to rotate and the amount of spaces to rotate. Then
     |      rotates the board accordint to these parameters.
     |  
     |  get_row_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : row number read.
     |  
     |  play_again(self)
     |      Return if the player wants to play again.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if the player wants to play again. False otherwise.
     |  
     |  read_command(self)
     |      ' Reads a command from standard input. Only 'rotate', 'word', 'help', 
     |      'exit' are valid. Calls the corresponding function to execute each 
     |      command.
     |  
     |  select_clue(self, subject, num_words, min_length, max_length)
     |      Select a specific type of clue. For this version, it will be 
     |              BySolution.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              subject that will be used into the building clue process.
     |      num_words : int
     |              Number of words to be selected
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: int
     |              Maximun length of a word.
     |  
     |  select_subject(self)
     |      Return a selected subject from the dictionary.
     |      
     |      Returns
     |      -------
     |      Subject
     |              Subject selected by the player.
     |  
     |  setup(self)
     |      Setup all the configuration of the game before starting.
     |  
     |  turn(self)
     |      Manages the turns of the player. Call the function to read the
     |      commands, and display the current state of the game.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Game:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Subject(builtins.object)
     |  Manage the subjects all the words on a board are related to.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  add_word(self, word)
     |      Add a word into the subject.
     |      
     |      Parameters
     |      ----------
     |      word : str
     |              Word to be added.
     |  
     |  get_name(self)
     |      Return the name of the subject. 
     |      
     |      Returns
     |      -------
     |      str
     |              Name of the subject.
     |  
     |  get_words(self)
     |      Return all the words of the subject.
     |      
     |      Returns
     |      -------
     |      [str]
     |              All the words of the subject. Can be empty.
     |  
     |  import_subject(self, file)
     |      Import the content of a well-formed xml into a subject.
     |      
     |      Parameters
     |      ----------
     |      file : str
     |              The path of the file.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class TimeRaceMode(SinglePlayer)
     |  Method resolution order:
     |      TimeRaceMode
     |      SinglePlayer
     |      Game
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  compute_score(self, words, time)
     |  
     |  is_time_over(self)
     |  
     |  manage_time(self)
     |  
     |  play(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SinglePlayer:
     |  
     |  add_player(self, player)
     |  
     |  display_current_state(self)
     |  
     |  restart(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Game:
     |  
     |  add_board(self, board)
     |      Associate a built board to the game.
     |      
     |      Parameters
     |      ----------
     |      board : Board
     |              Board to be added to the game.
     |  
     |  end_current_game(self)
     |      If the player wants to end the game, sets the variable start_again 
     |      to True. Otherwise exit the game.
     |  
     |  find_word(self)
     |      Find a word specified by the user. Get the row and the column 
     |      numbers corresponding to initial and the final cells of the word.
     |      Get the word from the board, and check if the word is valid.
     |      Display appropiate messages to the user.
     |  
     |  get_column_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : column number read.
     |  
     |  get_direction(self)
     |      Read from standard input a string corresponding to a direction.
     |              Only 'right', 'left', 'up', 'down' are possible.
     |      
     |      Returns
     |      -------
     |      str
     |              direction read.
     |  
     |  get_number_spaces(self, direction)
     |      Read from standard input an integer.
     |      
     |      Parameters
     |      ----------
     |      direction : str
     |              Direction the board is going to rotate to.
     |      
     |      Returns
     |      -------
     |      int
     |              Number of spaces read.
     |  
     |  get_play_again(self)
     |      Ask the user if he-she wants to start a new game.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if success, False otherwise.
     |  
     |  get_rotation_attr(self)
     |      Get the direction to rotate the board, the number of row or column
     |      that is going to rotate and the amount of spaces to rotate. Then
     |      rotates the board accordint to these parameters.
     |  
     |  get_row_number(self)
     |      Read from standard input an integer.
     |      
     |      Returns
     |      ------- 
     |              int : row number read.
     |  
     |  play_again(self)
     |      Return if the player wants to play again.
     |      
     |      Returns
     |      -------
     |      bool
     |              True if the player wants to play again. False otherwise.
     |  
     |  read_command(self)
     |      ' Reads a command from standard input. Only 'rotate', 'word', 'help', 
     |      'exit' are valid. Calls the corresponding function to execute each 
     |      command.
     |  
     |  select_clue(self, subject, num_words, min_length, max_length)
     |      Select a specific type of clue. For this version, it will be 
     |              BySolution.
     |      
     |      Parameters
     |      ----------
     |      subject : Subject
     |              subject that will be used into the building clue process.
     |      num_words : int
     |              Number of words to be selected
     |      min_length : int
     |              Minimun length of a word.
     |      max_length: int
     |              Maximun length of a word.
     |  
     |  select_subject(self)
     |      Return a selected subject from the dictionary.
     |      
     |      Returns
     |      -------
     |      Subject
     |              Subject selected by the player.
     |  
     |  setup(self)
     |      Setup all the configuration of the game before starting.
     |  
     |  turn(self)
     |      Manages the turns of the player. Call the function to read the
     |      commands, and display the current state of the game.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Game:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    configure_instructions()
        Import the instructions into the program.
    
    display_initial_message()
        Display on the standard output a welcome message.
    
    display_menu()
        Display on the standard output a welcome message.
    
    display_single_player_modes()
    
    exit_game()
        Display an exit message and exit the program.
    
    get_player_nickname()
    
    main()
        Main function of the program
    
    setup()
    
    start_game()
        Start the game.

DATA
    ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    bool_answers = ['yes', 'no']
    commands = ['help', 'exit', 'rotate', 'find']
    dictionary = <puzzle.Dictionary object>
    directions = ['right', 'left', 'up', 'down']
    game = <puzzle.PracticeMode object>
    inst = <puzzle.Instruction object>
    messages = {'already_found_word': ' was already found.', 'choose_subje...

FILE
    /home/patty/WordSearchPuzzle/puzzle.py


